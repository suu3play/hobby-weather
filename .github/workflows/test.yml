name: Test & Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run type check
      run: npm run typecheck

    - name: Run linting
      run: npm run lint

    - name: Run unit tests with coverage
      run: npm run test:coverage

    - name: Upload coverage to Codecov
      if: matrix.node-version == 20
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/coverage-final.json
        fail_ci_if_error: true

    - name: Build project
      run: npm run build

    - name: Install Playwright browsers
      if: matrix.node-version == 20
      run: npx playwright install --with-deps

    - name: Run E2E tests
      if: matrix.node-version == 20
      run: npm run test:e2e
      env:
        CI: true

    - name: Upload E2E test results
      if: always() && matrix.node-version == 20
      uses: actions/upload-artifact@v4
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  coverage-check:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate coverage report
      run: npm run test:coverage

    - name: Coverage threshold check
      run: |
        COVERAGE=$(node -p "
          const fs = require('fs');
          const coverage = JSON.parse(fs.readFileSync('./coverage/coverage-summary.json', 'utf8'));
          Math.min(
            coverage.total.lines.pct,
            coverage.total.statements.pct,
            coverage.total.functions.pct,
            coverage.total.branches.pct
          );
        ")
        echo "Current coverage: $COVERAGE%"
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "❌ Coverage is below 80% threshold"
          exit 1
        else
          echo "✅ Coverage meets 80% threshold"
        fi